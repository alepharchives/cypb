// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: connexio.proto

#ifndef PROTOBUF_connexio_2eproto__INCLUDED
#define PROTOBUF_connexio_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace connexio {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_connexio_2eproto();
void protobuf_AssignDesc_connexio_2eproto();
void protobuf_ShutdownFile_connexio_2eproto();

class Contact;
class Name;
class Phone;
class Email;

// ===================================================================

class Contact : public ::google::protobuf::Message {
 public:
  Contact();
  virtual ~Contact();
  
  Contact(const Contact& from);
  
  inline Contact& operator=(const Contact& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Contact& default_instance();
  
  void Swap(Contact* other);
  
  // implements Message ----------------------------------------------
  
  Contact* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Contact& from);
  void MergeFrom(const Contact& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .connexio.Name name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::connexio::Name& name() const;
  inline ::connexio::Name* mutable_name();
  inline ::connexio::Name* release_name();
  
  // repeated .connexio.Email email = 5;
  inline int email_size() const;
  inline void clear_email();
  static const int kEmailFieldNumber = 5;
  inline const ::connexio::Email& email(int index) const;
  inline ::connexio::Email* mutable_email(int index);
  inline ::connexio::Email* add_email();
  inline const ::google::protobuf::RepeatedPtrField< ::connexio::Email >&
      email() const;
  inline ::google::protobuf::RepeatedPtrField< ::connexio::Email >*
      mutable_email();
  
  // repeated .connexio.Phone phone = 6;
  inline int phone_size() const;
  inline void clear_phone();
  static const int kPhoneFieldNumber = 6;
  inline const ::connexio::Phone& phone(int index) const;
  inline ::connexio::Phone* mutable_phone(int index);
  inline ::connexio::Phone* add_phone();
  inline const ::google::protobuf::RepeatedPtrField< ::connexio::Phone >&
      phone() const;
  inline ::google::protobuf::RepeatedPtrField< ::connexio::Phone >*
      mutable_phone();
  
  // optional string note = 12;
  inline bool has_note() const;
  inline void clear_note();
  static const int kNoteFieldNumber = 12;
  inline const ::std::string& note() const;
  inline void set_note(const ::std::string& value);
  inline void set_note(const char* value);
  inline void set_note(const char* value, size_t size);
  inline ::std::string* mutable_note();
  inline ::std::string* release_note();
  
  // @@protoc_insertion_point(class_scope:connexio.Contact)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_note();
  inline void clear_has_note();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::connexio::Name* name_;
  ::google::protobuf::RepeatedPtrField< ::connexio::Email > email_;
  ::google::protobuf::RepeatedPtrField< ::connexio::Phone > phone_;
  ::std::string* note_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_connexio_2eproto();
  friend void protobuf_AssignDesc_connexio_2eproto();
  friend void protobuf_ShutdownFile_connexio_2eproto();
  
  void InitAsDefaultInstance();
  static Contact* default_instance_;
};
// -------------------------------------------------------------------

class Name : public ::google::protobuf::Message {
 public:
  Name();
  virtual ~Name();
  
  Name(const Name& from);
  
  inline Name& operator=(const Name& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Name& default_instance();
  
  void Swap(Name* other);
  
  // implements Message ----------------------------------------------
  
  Name* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Name& from);
  void MergeFrom(const Name& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string display_name = 1;
  inline bool has_display_name() const;
  inline void clear_display_name();
  static const int kDisplayNameFieldNumber = 1;
  inline const ::std::string& display_name() const;
  inline void set_display_name(const ::std::string& value);
  inline void set_display_name(const char* value);
  inline void set_display_name(const char* value, size_t size);
  inline ::std::string* mutable_display_name();
  inline ::std::string* release_display_name();
  
  // optional string prefix = 2;
  inline bool has_prefix() const;
  inline void clear_prefix();
  static const int kPrefixFieldNumber = 2;
  inline const ::std::string& prefix() const;
  inline void set_prefix(const ::std::string& value);
  inline void set_prefix(const char* value);
  inline void set_prefix(const char* value, size_t size);
  inline ::std::string* mutable_prefix();
  inline ::std::string* release_prefix();
  
  // optional string first = 3;
  inline bool has_first() const;
  inline void clear_first();
  static const int kFirstFieldNumber = 3;
  inline const ::std::string& first() const;
  inline void set_first(const ::std::string& value);
  inline void set_first(const char* value);
  inline void set_first(const char* value, size_t size);
  inline ::std::string* mutable_first();
  inline ::std::string* release_first();
  
  // optional string last = 4;
  inline bool has_last() const;
  inline void clear_last();
  static const int kLastFieldNumber = 4;
  inline const ::std::string& last() const;
  inline void set_last(const ::std::string& value);
  inline void set_last(const char* value);
  inline void set_last(const char* value, size_t size);
  inline ::std::string* mutable_last();
  inline ::std::string* release_last();
  
  // optional string middle = 5;
  inline bool has_middle() const;
  inline void clear_middle();
  static const int kMiddleFieldNumber = 5;
  inline const ::std::string& middle() const;
  inline void set_middle(const ::std::string& value);
  inline void set_middle(const char* value);
  inline void set_middle(const char* value, size_t size);
  inline ::std::string* mutable_middle();
  inline ::std::string* release_middle();
  
  // optional string suffix = 6;
  inline bool has_suffix() const;
  inline void clear_suffix();
  static const int kSuffixFieldNumber = 6;
  inline const ::std::string& suffix() const;
  inline void set_suffix(const ::std::string& value);
  inline void set_suffix(const char* value);
  inline void set_suffix(const char* value, size_t size);
  inline ::std::string* mutable_suffix();
  inline ::std::string* release_suffix();
  
  // optional string nickname = 7;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNicknameFieldNumber = 7;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const char* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  
  // @@protoc_insertion_point(class_scope:connexio.Name)
 private:
  inline void set_has_display_name();
  inline void clear_has_display_name();
  inline void set_has_prefix();
  inline void clear_has_prefix();
  inline void set_has_first();
  inline void clear_has_first();
  inline void set_has_last();
  inline void clear_has_last();
  inline void set_has_middle();
  inline void clear_has_middle();
  inline void set_has_suffix();
  inline void clear_has_suffix();
  inline void set_has_nickname();
  inline void clear_has_nickname();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* display_name_;
  ::std::string* prefix_;
  ::std::string* first_;
  ::std::string* last_;
  ::std::string* middle_;
  ::std::string* suffix_;
  ::std::string* nickname_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_connexio_2eproto();
  friend void protobuf_AssignDesc_connexio_2eproto();
  friend void protobuf_ShutdownFile_connexio_2eproto();
  
  void InitAsDefaultInstance();
  static Name* default_instance_;
};
// -------------------------------------------------------------------

class Phone : public ::google::protobuf::Message {
 public:
  Phone();
  virtual ~Phone();
  
  Phone(const Phone& from);
  
  inline Phone& operator=(const Phone& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Phone& default_instance();
  
  void Swap(Phone* other);
  
  // implements Message ----------------------------------------------
  
  Phone* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Phone& from);
  void MergeFrom(const Phone& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string display_number = 1;
  inline bool has_display_number() const;
  inline void clear_display_number();
  static const int kDisplayNumberFieldNumber = 1;
  inline const ::std::string& display_number() const;
  inline void set_display_number(const ::std::string& value);
  inline void set_display_number(const char* value);
  inline void set_display_number(const char* value, size_t size);
  inline ::std::string* mutable_display_number();
  inline ::std::string* release_display_number();
  
  // @@protoc_insertion_point(class_scope:connexio.Phone)
 private:
  inline void set_has_display_number();
  inline void clear_has_display_number();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* display_number_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_connexio_2eproto();
  friend void protobuf_AssignDesc_connexio_2eproto();
  friend void protobuf_ShutdownFile_connexio_2eproto();
  
  void InitAsDefaultInstance();
  static Phone* default_instance_;
};
// -------------------------------------------------------------------

class Email : public ::google::protobuf::Message {
 public:
  Email();
  virtual ~Email();
  
  Email(const Email& from);
  
  inline Email& operator=(const Email& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Email& default_instance();
  
  void Swap(Email* other);
  
  // implements Message ----------------------------------------------
  
  Email* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Email& from);
  void MergeFrom(const Email& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string email = 1;
  inline bool has_email() const;
  inline void clear_email();
  static const int kEmailFieldNumber = 1;
  inline const ::std::string& email() const;
  inline void set_email(const ::std::string& value);
  inline void set_email(const char* value);
  inline void set_email(const char* value, size_t size);
  inline ::std::string* mutable_email();
  inline ::std::string* release_email();
  
  // @@protoc_insertion_point(class_scope:connexio.Email)
 private:
  inline void set_has_email();
  inline void clear_has_email();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* email_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_connexio_2eproto();
  friend void protobuf_AssignDesc_connexio_2eproto();
  friend void protobuf_ShutdownFile_connexio_2eproto();
  
  void InitAsDefaultInstance();
  static Email* default_instance_;
};
// ===================================================================


// ===================================================================

// Contact

// optional .connexio.Name name = 1;
inline bool Contact::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Contact::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Contact::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Contact::clear_name() {
  if (name_ != NULL) name_->::connexio::Name::Clear();
  clear_has_name();
}
inline const ::connexio::Name& Contact::name() const {
  return name_ != NULL ? *name_ : *default_instance_->name_;
}
inline ::connexio::Name* Contact::mutable_name() {
  set_has_name();
  if (name_ == NULL) name_ = new ::connexio::Name;
  return name_;
}
inline ::connexio::Name* Contact::release_name() {
  clear_has_name();
  ::connexio::Name* temp = name_;
  name_ = NULL;
  return temp;
}

// repeated .connexio.Email email = 5;
inline int Contact::email_size() const {
  return email_.size();
}
inline void Contact::clear_email() {
  email_.Clear();
}
inline const ::connexio::Email& Contact::email(int index) const {
  return email_.Get(index);
}
inline ::connexio::Email* Contact::mutable_email(int index) {
  return email_.Mutable(index);
}
inline ::connexio::Email* Contact::add_email() {
  return email_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::connexio::Email >&
Contact::email() const {
  return email_;
}
inline ::google::protobuf::RepeatedPtrField< ::connexio::Email >*
Contact::mutable_email() {
  return &email_;
}

// repeated .connexio.Phone phone = 6;
inline int Contact::phone_size() const {
  return phone_.size();
}
inline void Contact::clear_phone() {
  phone_.Clear();
}
inline const ::connexio::Phone& Contact::phone(int index) const {
  return phone_.Get(index);
}
inline ::connexio::Phone* Contact::mutable_phone(int index) {
  return phone_.Mutable(index);
}
inline ::connexio::Phone* Contact::add_phone() {
  return phone_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::connexio::Phone >&
Contact::phone() const {
  return phone_;
}
inline ::google::protobuf::RepeatedPtrField< ::connexio::Phone >*
Contact::mutable_phone() {
  return &phone_;
}

// optional string note = 12;
inline bool Contact::has_note() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Contact::set_has_note() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Contact::clear_has_note() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Contact::clear_note() {
  if (note_ != &::google::protobuf::internal::kEmptyString) {
    note_->clear();
  }
  clear_has_note();
}
inline const ::std::string& Contact::note() const {
  return *note_;
}
inline void Contact::set_note(const ::std::string& value) {
  set_has_note();
  if (note_ == &::google::protobuf::internal::kEmptyString) {
    note_ = new ::std::string;
  }
  note_->assign(value);
}
inline void Contact::set_note(const char* value) {
  set_has_note();
  if (note_ == &::google::protobuf::internal::kEmptyString) {
    note_ = new ::std::string;
  }
  note_->assign(value);
}
inline void Contact::set_note(const char* value, size_t size) {
  set_has_note();
  if (note_ == &::google::protobuf::internal::kEmptyString) {
    note_ = new ::std::string;
  }
  note_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Contact::mutable_note() {
  set_has_note();
  if (note_ == &::google::protobuf::internal::kEmptyString) {
    note_ = new ::std::string;
  }
  return note_;
}
inline ::std::string* Contact::release_note() {
  clear_has_note();
  if (note_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = note_;
    note_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// Name

// optional string display_name = 1;
inline bool Name::has_display_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Name::set_has_display_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Name::clear_has_display_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Name::clear_display_name() {
  if (display_name_ != &::google::protobuf::internal::kEmptyString) {
    display_name_->clear();
  }
  clear_has_display_name();
}
inline const ::std::string& Name::display_name() const {
  return *display_name_;
}
inline void Name::set_display_name(const ::std::string& value) {
  set_has_display_name();
  if (display_name_ == &::google::protobuf::internal::kEmptyString) {
    display_name_ = new ::std::string;
  }
  display_name_->assign(value);
}
inline void Name::set_display_name(const char* value) {
  set_has_display_name();
  if (display_name_ == &::google::protobuf::internal::kEmptyString) {
    display_name_ = new ::std::string;
  }
  display_name_->assign(value);
}
inline void Name::set_display_name(const char* value, size_t size) {
  set_has_display_name();
  if (display_name_ == &::google::protobuf::internal::kEmptyString) {
    display_name_ = new ::std::string;
  }
  display_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Name::mutable_display_name() {
  set_has_display_name();
  if (display_name_ == &::google::protobuf::internal::kEmptyString) {
    display_name_ = new ::std::string;
  }
  return display_name_;
}
inline ::std::string* Name::release_display_name() {
  clear_has_display_name();
  if (display_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = display_name_;
    display_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string prefix = 2;
inline bool Name::has_prefix() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Name::set_has_prefix() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Name::clear_has_prefix() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Name::clear_prefix() {
  if (prefix_ != &::google::protobuf::internal::kEmptyString) {
    prefix_->clear();
  }
  clear_has_prefix();
}
inline const ::std::string& Name::prefix() const {
  return *prefix_;
}
inline void Name::set_prefix(const ::std::string& value) {
  set_has_prefix();
  if (prefix_ == &::google::protobuf::internal::kEmptyString) {
    prefix_ = new ::std::string;
  }
  prefix_->assign(value);
}
inline void Name::set_prefix(const char* value) {
  set_has_prefix();
  if (prefix_ == &::google::protobuf::internal::kEmptyString) {
    prefix_ = new ::std::string;
  }
  prefix_->assign(value);
}
inline void Name::set_prefix(const char* value, size_t size) {
  set_has_prefix();
  if (prefix_ == &::google::protobuf::internal::kEmptyString) {
    prefix_ = new ::std::string;
  }
  prefix_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Name::mutable_prefix() {
  set_has_prefix();
  if (prefix_ == &::google::protobuf::internal::kEmptyString) {
    prefix_ = new ::std::string;
  }
  return prefix_;
}
inline ::std::string* Name::release_prefix() {
  clear_has_prefix();
  if (prefix_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = prefix_;
    prefix_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string first = 3;
inline bool Name::has_first() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Name::set_has_first() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Name::clear_has_first() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Name::clear_first() {
  if (first_ != &::google::protobuf::internal::kEmptyString) {
    first_->clear();
  }
  clear_has_first();
}
inline const ::std::string& Name::first() const {
  return *first_;
}
inline void Name::set_first(const ::std::string& value) {
  set_has_first();
  if (first_ == &::google::protobuf::internal::kEmptyString) {
    first_ = new ::std::string;
  }
  first_->assign(value);
}
inline void Name::set_first(const char* value) {
  set_has_first();
  if (first_ == &::google::protobuf::internal::kEmptyString) {
    first_ = new ::std::string;
  }
  first_->assign(value);
}
inline void Name::set_first(const char* value, size_t size) {
  set_has_first();
  if (first_ == &::google::protobuf::internal::kEmptyString) {
    first_ = new ::std::string;
  }
  first_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Name::mutable_first() {
  set_has_first();
  if (first_ == &::google::protobuf::internal::kEmptyString) {
    first_ = new ::std::string;
  }
  return first_;
}
inline ::std::string* Name::release_first() {
  clear_has_first();
  if (first_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = first_;
    first_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string last = 4;
inline bool Name::has_last() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Name::set_has_last() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Name::clear_has_last() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Name::clear_last() {
  if (last_ != &::google::protobuf::internal::kEmptyString) {
    last_->clear();
  }
  clear_has_last();
}
inline const ::std::string& Name::last() const {
  return *last_;
}
inline void Name::set_last(const ::std::string& value) {
  set_has_last();
  if (last_ == &::google::protobuf::internal::kEmptyString) {
    last_ = new ::std::string;
  }
  last_->assign(value);
}
inline void Name::set_last(const char* value) {
  set_has_last();
  if (last_ == &::google::protobuf::internal::kEmptyString) {
    last_ = new ::std::string;
  }
  last_->assign(value);
}
inline void Name::set_last(const char* value, size_t size) {
  set_has_last();
  if (last_ == &::google::protobuf::internal::kEmptyString) {
    last_ = new ::std::string;
  }
  last_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Name::mutable_last() {
  set_has_last();
  if (last_ == &::google::protobuf::internal::kEmptyString) {
    last_ = new ::std::string;
  }
  return last_;
}
inline ::std::string* Name::release_last() {
  clear_has_last();
  if (last_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = last_;
    last_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string middle = 5;
inline bool Name::has_middle() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Name::set_has_middle() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Name::clear_has_middle() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Name::clear_middle() {
  if (middle_ != &::google::protobuf::internal::kEmptyString) {
    middle_->clear();
  }
  clear_has_middle();
}
inline const ::std::string& Name::middle() const {
  return *middle_;
}
inline void Name::set_middle(const ::std::string& value) {
  set_has_middle();
  if (middle_ == &::google::protobuf::internal::kEmptyString) {
    middle_ = new ::std::string;
  }
  middle_->assign(value);
}
inline void Name::set_middle(const char* value) {
  set_has_middle();
  if (middle_ == &::google::protobuf::internal::kEmptyString) {
    middle_ = new ::std::string;
  }
  middle_->assign(value);
}
inline void Name::set_middle(const char* value, size_t size) {
  set_has_middle();
  if (middle_ == &::google::protobuf::internal::kEmptyString) {
    middle_ = new ::std::string;
  }
  middle_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Name::mutable_middle() {
  set_has_middle();
  if (middle_ == &::google::protobuf::internal::kEmptyString) {
    middle_ = new ::std::string;
  }
  return middle_;
}
inline ::std::string* Name::release_middle() {
  clear_has_middle();
  if (middle_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = middle_;
    middle_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string suffix = 6;
inline bool Name::has_suffix() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Name::set_has_suffix() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Name::clear_has_suffix() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Name::clear_suffix() {
  if (suffix_ != &::google::protobuf::internal::kEmptyString) {
    suffix_->clear();
  }
  clear_has_suffix();
}
inline const ::std::string& Name::suffix() const {
  return *suffix_;
}
inline void Name::set_suffix(const ::std::string& value) {
  set_has_suffix();
  if (suffix_ == &::google::protobuf::internal::kEmptyString) {
    suffix_ = new ::std::string;
  }
  suffix_->assign(value);
}
inline void Name::set_suffix(const char* value) {
  set_has_suffix();
  if (suffix_ == &::google::protobuf::internal::kEmptyString) {
    suffix_ = new ::std::string;
  }
  suffix_->assign(value);
}
inline void Name::set_suffix(const char* value, size_t size) {
  set_has_suffix();
  if (suffix_ == &::google::protobuf::internal::kEmptyString) {
    suffix_ = new ::std::string;
  }
  suffix_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Name::mutable_suffix() {
  set_has_suffix();
  if (suffix_ == &::google::protobuf::internal::kEmptyString) {
    suffix_ = new ::std::string;
  }
  return suffix_;
}
inline ::std::string* Name::release_suffix() {
  clear_has_suffix();
  if (suffix_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = suffix_;
    suffix_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string nickname = 7;
inline bool Name::has_nickname() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Name::set_has_nickname() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Name::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Name::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& Name::nickname() const {
  return *nickname_;
}
inline void Name::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void Name::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void Name::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Name::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  return nickname_;
}
inline ::std::string* Name::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// Phone

// required string display_number = 1;
inline bool Phone::has_display_number() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Phone::set_has_display_number() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Phone::clear_has_display_number() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Phone::clear_display_number() {
  if (display_number_ != &::google::protobuf::internal::kEmptyString) {
    display_number_->clear();
  }
  clear_has_display_number();
}
inline const ::std::string& Phone::display_number() const {
  return *display_number_;
}
inline void Phone::set_display_number(const ::std::string& value) {
  set_has_display_number();
  if (display_number_ == &::google::protobuf::internal::kEmptyString) {
    display_number_ = new ::std::string;
  }
  display_number_->assign(value);
}
inline void Phone::set_display_number(const char* value) {
  set_has_display_number();
  if (display_number_ == &::google::protobuf::internal::kEmptyString) {
    display_number_ = new ::std::string;
  }
  display_number_->assign(value);
}
inline void Phone::set_display_number(const char* value, size_t size) {
  set_has_display_number();
  if (display_number_ == &::google::protobuf::internal::kEmptyString) {
    display_number_ = new ::std::string;
  }
  display_number_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Phone::mutable_display_number() {
  set_has_display_number();
  if (display_number_ == &::google::protobuf::internal::kEmptyString) {
    display_number_ = new ::std::string;
  }
  return display_number_;
}
inline ::std::string* Phone::release_display_number() {
  clear_has_display_number();
  if (display_number_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = display_number_;
    display_number_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// Email

// required string email = 1;
inline bool Email::has_email() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Email::set_has_email() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Email::clear_has_email() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Email::clear_email() {
  if (email_ != &::google::protobuf::internal::kEmptyString) {
    email_->clear();
  }
  clear_has_email();
}
inline const ::std::string& Email::email() const {
  return *email_;
}
inline void Email::set_email(const ::std::string& value) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  email_->assign(value);
}
inline void Email::set_email(const char* value) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  email_->assign(value);
}
inline void Email::set_email(const char* value, size_t size) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  email_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Email::mutable_email() {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  return email_;
}
inline ::std::string* Email::release_email() {
  clear_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = email_;
    email_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace connexio

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_connexio_2eproto__INCLUDED
